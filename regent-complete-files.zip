# Regent Cha-am Hotel - ไฟล์ครบถ้วนสำหรับ Deploy แยก

## ไฟล์ที่ต้องแทนที่ในโปรเจคใหม่:

### 1. package.json
```json
{
  "name": "regent-cha-am-hotel-maintenance-system",
  "description": "Maintenance management system for Regent Cha-am Hotel",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build",
    "start": "NODE_ENV=production tsx server/index.ts",
    "db:push": "drizzle-kit push",
    "db:studio": "drizzle-kit studio"
  }
}
```

### 2. client/src/locales/en.json (เฉพาะส่วนต้น)
```json
{
  "app": {
    "title": "Regent Cha-am Hotel Maintenance System",
    "subtitle": "Hotel maintenance request system"
  },
  "auth": {
    "signIn": "Sign In",
    "signOut": "Logout",
    "email": "Email", 
    "password": "Password",
    "welcome": "Welcome to Regent Cha-am Hotel"
  }
}
```

### 3. client/src/locales/th.json (เฉพาะส่วนต้น)
```json
{
  "app": {
    "title": "ระบบแจ้งซ่อมโรงแรมรีเจนท์ ชะอำ",
    "subtitle": "ระบบแจ้งซ่อมสำหรับโรงแรม"
  },
  "auth": {
    "signIn": "เข้าสู่ระบบ",
    "signOut": "ออกจากระบบ", 
    "email": "อีเมล",
    "password": "รหัสผ่าน",
    "welcome": "ยินดีต้อนรับสู่โรงแรมรีเจนท์ ชะอำ"
  }
}
```

### 4. client/src/index.css (ธีมสีฟ้าครบถ้วน)
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: hsl(0, 0%, 100%);
  --foreground: hsl(222, 84%, 5%);
  --muted: hsl(215, 25%, 27%);
  --muted-foreground: hsl(215, 20%, 65%);
  --popover: hsl(0, 0%, 100%);
  --popover-foreground: hsl(222, 84%, 5%);
  --card: hsl(0, 0%, 100%);
  --card-foreground: hsl(222, 84%, 5%);
  --border: hsl(215, 20%, 82%);
  --input: hsl(215, 20%, 82%);
  --primary: hsl(219, 85%, 58%);
  --primary-foreground: hsl(0, 0%, 100%);
  --secondary: hsl(220, 85%, 55%);
  --secondary-foreground: hsl(0, 0%, 100%);
  --accent: hsl(221, 83%, 53%);
  --accent-foreground: hsl(0, 0%, 100%);
  --destructive: hsl(0, 84%, 60%);
  --destructive-foreground: hsl(0, 0%, 100%);
  --ring: hsl(219, 85%, 58%);
  --radius: 0.75rem;
  
  /* Chart colors - Blue theme */
  --chart-1: hsl(219, 85%, 58%);
  --chart-2: hsl(220, 85%, 55%);
  --chart-3: hsl(221, 83%, 53%);
  --chart-4: hsl(215, 85%, 60%);
  --chart-5: hsl(210, 80%, 65%);
}

.dark {
  --background: hsl(222, 84%, 5%);
  --foreground: hsl(210, 40%, 98%);
  --muted: hsl(215, 25%, 16%);
  --muted-foreground: hsl(215, 20%, 65%);
  --popover: hsl(215, 25%, 9%);
  --popover-foreground: hsl(210, 40%, 98%);
  --card: hsl(215, 25%, 9%);
  --card-foreground: hsl(210, 40%, 98%);
  --border: hsl(215, 25%, 18%);
  --input: hsl(215, 25%, 18%);
  --primary: hsl(219, 85%, 58%);
  --primary-foreground: hsl(0, 0%, 100%);
  --secondary: hsl(215, 25%, 16%);
  --secondary-foreground: hsl(0, 0%, 100%);
  --accent: hsl(215, 25%, 16%);
  --accent-foreground: hsl(0, 0%, 100%);
  --destructive: hsl(0, 84%, 60%);
  --destructive-foreground: hsl(0, 0%, 100%);
  --ring: hsl(219, 85%, 58%);
  --radius: 0.75rem;
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply antialiased text-foreground;
    font-family: 'Inter', 'Poppins', sans-serif;
    font-weight: 500;
    background: #2563eb !important;
    background-image: linear-gradient(135deg, #2563eb, #1d4ed8, #1e40af, #3b82f6, #60a5fa) !important;
  }

  .text-enhanced {
    color: hsl(222, 84%, 5%);
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(37, 99, 235, 0.1);
  }

  .dark .text-enhanced {
    color: hsl(210, 40%, 98%);
    text-shadow: 0 1px 2px rgba(37, 99, 235, 0.3);
  }

  .text-subtitle-enhanced {
    color: hsl(215, 20%, 45%);
    font-weight: 500;
  }

  .dark .text-subtitle-enhanced {
    color: hsl(215, 20%, 65%);
  }

  .text-white-enhanced {
    color: hsl(0, 0%, 100%);
    font-weight: 500;
    text-shadow: 0 1px 2px rgba(37, 99, 235, 0.4);
  }
}
```

### 5. server/db.ts
```typescript
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "@shared/schema";

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

export const pool = new Pool({ 
  connectionString: process.env.DATABASE_URL
});
export const db = drizzle({ client: pool, schema });
```

### 6. Setup Database Script
รันใน Console หลังจาก deploy:
```sql
-- สร้าง schema สำหรับ Regent Hotel
CREATE SCHEMA IF NOT EXISTS regent_hotel;

-- สร้างตารางทั้งหมด (copy จาก setup-regent-schema.sql)
```

## คำแนะนำการ Deploy:
1. สร้าง Repl ใหม่ชื่อ "Regent-Cha-am-Hotel-Maintenance-System"
2. Copy ไฟล์ทั้งหมดจากโปรเจคเดิม  
3. แทนที่ไฟล์ข้างต้น
4. สร้างฐานข้อมูลใหม่
5. รัน setup script
6. Deploy

ผลลัพธ์: ได้ 2 deployment แยกกันสมบูรณ์!